/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 22 11:14:06 GMT 2022
 */

package io.diffblue.corebanking.account;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.diffblue.corebanking.account.Account;
import io.diffblue.corebanking.client.Client;
import io.diffblue.corebanking.transaction.BankTransaction;
import io.diffblue.corebanking.transaction.CashTransaction;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Account_ESTest extends Account_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Client client0 = new Client("");
      Account account0 = new Account(0L, client0, 2168L);
      Account account1 = new Account((-140L), client0, 4);
      boolean boolean0 = account0.equals(account1);
      assertEquals((-140L), account1.getAccountNumber());
      assertFalse(boolean0);
      assertEquals("Current", account1.getAccountName());
      assertFalse(account1.equals((Object)account0));
      assertEquals(4L, account1.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Client client0 = new Client("");
      Account account0 = new Account(0L, client0, 0L);
      account0.takeFromBalance(0L);
      assertEquals("Current", account0.getAccountName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Client client0 = new Client("EXECUTED");
      Account account0 = new Account(0L, client0, 0L);
      account0.getCurrentBalance();
      assertEquals("Current", account0.getAccountName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Client client0 = new Client("");
      Account account0 = new Account(0L, client0, 2168L);
      long long0 = account0.getCurrentBalance();
      assertEquals(2168L, long0);
      assertEquals("Current", account0.getAccountName());
      assertEquals(0L, account0.getAccountNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Account account0 = new Account(1071L, (Client) null, (-1L));
      account0.getClient();
      assertEquals("Current", account0.getAccountName());
      assertEquals(1071L, account0.getAccountNumber());
      assertEquals((-1L), account0.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Client client0 = new Client((String) null);
      Account account0 = new Account(0L, client0, 0L);
      account0.getAccountNumber();
      assertEquals("Current", account0.getAccountName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Client client0 = new Client("");
      Account account0 = new Account(2345L, client0, (-4347L));
      long long0 = account0.getAccountNumber();
      assertEquals((-4347L), account0.getCurrentBalance());
      assertEquals("Current", account0.getAccountName());
      assertEquals(2345L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Account account0 = new Account(196L, (Client) null, (-13L));
      assertEquals("Current", account0.getAccountName());
      
      account0.setAccountName((String) null);
      account0.getAccountName();
      assertEquals(196L, account0.getAccountNumber());
      assertEquals((-13L), account0.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Client client0 = new Client((String) null);
      Account account0 = new Account((-1L), client0, (-1L));
      assertEquals("Current", account0.getAccountName());
      
      account0.setAccountName("");
      account0.getAccountName();
      assertEquals((-1L), account0.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Account account0 = new Account(0L, (Client) null, (-1L));
      // Undeclared exception!
      try { 
        account0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.diffblue.corebanking.account.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Client client0 = new Client((String) null);
      Account account0 = new Account(1L, client0, 0L);
      MockDate mockDate0 = new MockDate((-903), 0, (-903));
      CashTransaction cashTransaction0 = new CashTransaction(0L, mockDate0, account0);
      account0.addTransaction(cashTransaction0);
      Account.AccountStatement account_AccountStatement0 = account0.getAccountStatement();
      String string0 = account_AccountStatement0.toString();
      assertEquals("Current", account0.getAccountName());
      assertEquals("Transaction: | 94.07.12\t| Source: CASH\t| Target: 1\t| Amount: 0\t| Balance: 0\t| Transaction state: NOT_EXECUTED_YET\t|\n", string0);
      assertEquals(0L, account0.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Account account0 = new Account((-1L), (Client) null, 0L);
      long long0 = account0.getAccountNumber();
      assertEquals(0L, account0.getCurrentBalance());
      assertEquals((-1L), long0);
      assertEquals("Current", account0.getAccountName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Client client0 = new Client("");
      Account account0 = new Account((-1085L), client0, (-1085L));
      long long0 = account0.getCurrentBalance();
      assertEquals((-1085L), long0);
      assertEquals("Current", account0.getAccountName());
      assertEquals((-1085L), account0.getAccountNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Client client0 = new Client((String) null);
      Account account0 = new Account((-1L), client0, (-1L));
      account0.getAccountState();
      assertEquals("Current", account0.getAccountName());
      assertEquals((-1L), account0.getCurrentBalance());
      assertEquals((-1L), account0.getAccountNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Client client0 = new Client((String) null);
      Account account0 = new Account((-1L), client0, (-1L));
      String string0 = account0.getAccountName();
      assertEquals((-1L), account0.getCurrentBalance());
      assertEquals((-1L), account0.getAccountNumber());
      assertEquals("Current", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Client client0 = new Client((String) null);
      Account account0 = new Account((-1L), client0, (-1L));
      account0.getClient();
      assertEquals((-1L), account0.getCurrentBalance());
      assertEquals("Current", account0.getAccountName());
      assertEquals((-1L), account0.getAccountNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Client client0 = new Client((String) null);
      Account account0 = new Account((-1L), client0, (-1L));
      MockDate mockDate0 = new MockDate();
      BankTransaction bankTransaction0 = new BankTransaction((-1L), mockDate0, account0, account0);
      account0.addTransaction(bankTransaction0);
      String string0 = account0.toString();
      assertEquals("Account: | Acc #: -1\t | Acc name: Current\t | Acc holder: null\t | Acc balance: -1\t | Acc state: OPEN\t |\nTransaction: | 14.02.14\t| Source: -1\t| Target: -1\t| Amount: -1\t| Balance: 0\t| Transaction state: NOT_EXECUTED_YET\t|\n", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Client client0 = new Client("U*|a6{X'?VcK|");
      Account account0 = new Account(4, client0, 4);
      Account account1 = new Account(4, client0, 4);
      boolean boolean0 = account0.equals(account1);
      assertTrue(boolean0);
      assertEquals("Current", account1.getAccountName());
      assertEquals(4L, account1.getAccountNumber());
      assertEquals(4L, account1.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Client client0 = new Client((String) null);
      Account account0 = new Account((-1L), client0, (-1L));
      Account account1 = new Account(406L, client0, 406L);
      boolean boolean0 = account0.equals(account1);
      assertEquals(406L, account1.getAccountNumber());
      assertFalse(boolean0);
      assertEquals(406L, account1.getCurrentBalance());
      assertEquals("Current", account1.getAccountName());
      assertFalse(account1.equals((Object)account0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Account account0 = new Account(19L, (Client) null, 19L);
      boolean boolean0 = account0.equals("Account statement empty.");
      assertFalse(boolean0);
      assertEquals("Current", account0.getAccountName());
      assertEquals(19L, account0.getCurrentBalance());
      assertEquals(19L, account0.getAccountNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Client client0 = new Client("Acc hode': ");
      Account account0 = new Account(870L, client0, 870L);
      boolean boolean0 = account0.equals(account0);
      assertEquals(870L, account0.getCurrentBalance());
      assertEquals("Current", account0.getAccountName());
      assertTrue(boolean0);
      assertEquals(870L, account0.getAccountNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Client client0 = new Client("");
      Account account0 = new Account(5783L, client0, 5783L);
      boolean boolean0 = account0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("Current", account0.getAccountName());
      assertEquals(5783L, account0.getAccountNumber());
      assertEquals(5783L, account0.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Client client0 = new Client("EwFx)UR7[\"N_");
      Account account0 = new Account((-946L), client0, (-946L));
      account0.closeAccount();
      MockDate mockDate0 = new MockDate();
      CashTransaction cashTransaction0 = new CashTransaction((-946L), mockDate0, account0);
      try { 
        account0.addTransaction(cashTransaction0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The account is closed, you cannot add a transaction.
         //
         verifyException("io.diffblue.corebanking.account.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Client client0 = new Client("Amount: ");
      Account account0 = new Account(0L, client0, (-1002L));
      account0.closeAccount();
      try { 
        account0.closeAccount();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Account is already closed.
         //
         verifyException("io.diffblue.corebanking.account.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Client client0 = new Client((String) null);
      Account account0 = new Account(32L, client0, 32L);
      account0.closeAccount();
      try { 
        account0.setAccountName((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot change account name, account is closed.
         //
         verifyException("io.diffblue.corebanking.account.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Client client0 = new Client("");
      Account account0 = new Account(5783L, client0, 5783L);
      account0.takeFromBalance(5783L);
      assertEquals(0L, account0.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Client client0 = new Client("T6|#'n:{j0kVuF$&3");
      Account account0 = new Account(19L, client0, 19L);
      account0.closeAccount();
      try { 
        account0.takeFromBalance(19L);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot take from balance, account is closed.
         //
         verifyException("io.diffblue.corebanking.account.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Client client0 = new Client("#!p[Zm&954@*{mA$r");
      Account account0 = new Account(104L, client0, 0L);
      try { 
        account0.takeFromBalance((-1178L));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Trying to take -1178 from the existing balance of 0. Not enough funds.
         //
         verifyException("io.diffblue.corebanking.account.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Account account0 = new Account(19L, (Client) null, 19L);
      account0.closeAccount();
      try { 
        account0.addToBalance(4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot add to balance, account is closed.
         //
         verifyException("io.diffblue.corebanking.account.Account", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Account account0 = new Account(19L, (Client) null, 19L);
      account0.addToBalance(19L);
      assertEquals(38L, account0.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Client client0 = new Client("EwFx)UR7[\"N_");
      Account account0 = new Account((-946L), client0, (-946L));
      Account.AccountStatement account_AccountStatement0 = account0.getAccountStatement();
      account_AccountStatement0.getTransactions();
      assertEquals((-946L), account0.getCurrentBalance());
      assertEquals("Current", account0.getAccountName());
      assertEquals((-946L), account0.getAccountNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Client client0 = new Client("\"v1|*#a-P");
      Account account0 = new Account(0L, client0, 0L);
      BankTransaction bankTransaction0 = new BankTransaction((-176L), (Date) null, account0, account0);
      account0.addTransaction(bankTransaction0);
      account0.addTransaction(bankTransaction0);
      // Undeclared exception!
      try { 
        account0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Account account0 = new Account(19L, (Client) null, 19L);
      Account.AccountStatement account_AccountStatement0 = account0.getAccountStatement();
      String string0 = account_AccountStatement0.toString();
      assertEquals("Account statement empty.", string0);
      assertEquals(19L, account0.getAccountNumber());
      assertEquals(19L, account0.getCurrentBalance());
      assertEquals("Current", account0.getAccountName());
  }
}
