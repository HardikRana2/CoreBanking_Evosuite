/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 22 11:38:41 GMT 2022
 */

package io.diffblue.corebanking.transaction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.diffblue.corebanking.account.Account;
import io.diffblue.corebanking.client.Client;
import io.diffblue.corebanking.transaction.BankTransaction;
import io.diffblue.corebanking.transaction.CashTransaction;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transaction_ESTest extends Transaction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 546, 1691);
      Client client0 = new Client("FAILED");
      Account account0 = new Account((-478L), client0, 1691);
      BankTransaction bankTransaction0 = new BankTransaction((-1489L), mockDate0, account0, account0);
      bankTransaction0.executeTransaction();
      assertEquals((-1489L), bankTransaction0.getTransactionAmount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Client client0 = new Client("\t|");
      Account account0 = new Account(1L, client0, (-1079L));
      CashTransaction cashTransaction0 = new CashTransaction(1L, (Date) null, account0);
      cashTransaction0.setAccountBalanceAfterTransaction(2459L);
      assertEquals(1L, cashTransaction0.getTransactionAmount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Client client0 = new Client("\t|");
      Account account0 = new Account(1L, client0, (-1079L));
      CashTransaction cashTransaction0 = new CashTransaction(1L, (Date) null, account0);
      cashTransaction0.markTransactionAsExecuted();
      assertEquals(1L, cashTransaction0.getTransactionAmount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Client client0 = new Client("\t|");
      Account account0 = new Account(1L, client0, (-1079L));
      CashTransaction cashTransaction0 = new CashTransaction(1L, (Date) null, account0);
      cashTransaction0.getTransactionDate();
      assertEquals(1L, cashTransaction0.getTransactionAmount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Client client0 = new Client("w_uE\"UN-L>@_F(f'l");
      Account account0 = new Account((-995L), client0, 0L);
      BankTransaction bankTransaction0 = new BankTransaction(0L, mockDate0, account0, account0);
      long long0 = bankTransaction0.getTransactionAmount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4, 4, 4, 4, (-3605));
      BankTransaction bankTransaction0 = new BankTransaction((-646L), mockDate0, (Account) null, (Account) null);
      long long0 = bankTransaction0.getTransactionAmount();
      assertEquals((-646L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Client client0 = new Client("\t|");
      Account account0 = new Account(1L, client0, (-1079L));
      CashTransaction cashTransaction0 = new CashTransaction(1L, (Date) null, account0);
      cashTransaction0.getTarget();
      assertEquals(1L, cashTransaction0.getTransactionAmount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Client client0 = new Client("{d_@P@yAvd/=Rd@");
      Account account0 = new Account(0L, client0, 0L);
      CashTransaction cashTransaction0 = new CashTransaction(522L, (Date) null, account0);
      cashTransaction0.getSource();
      assertEquals(522L, cashTransaction0.getTransactionAmount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      BankTransaction bankTransaction0 = new BankTransaction(0L, mockDate0, (Account) null, (Account) null);
      // Undeclared exception!
      try { 
        bankTransaction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.diffblue.corebanking.transaction.BankTransaction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-370L));
      CashTransaction cashTransaction0 = new CashTransaction(0L, mockDate0, (Account) null);
      // Undeclared exception!
      try { 
        cashTransaction0.getTarget();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.diffblue.corebanking.transaction.CashTransaction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(4, 4, 4, 4, (-3605));
      BankTransaction bankTransaction0 = new BankTransaction((-646L), mockDate0, (Account) null, (Account) null);
      // Undeclared exception!
      try { 
        bankTransaction0.getSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.diffblue.corebanking.transaction.BankTransaction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(423L);
      Client client0 = new Client("");
      Account account0 = new Account((-282L), client0, 3310L);
      account0.closeAccount();
      CashTransaction cashTransaction0 = new CashTransaction(423L, mockDate0, account0);
      try { 
        cashTransaction0.executeTransaction();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The target account is closed.
         //
         verifyException("io.diffblue.corebanking.transaction.CashTransaction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-771), 3965, 3965, 0, 2, 475);
      CashTransaction cashTransaction0 = new CashTransaction(0L, mockDate0, (Account) null);
      // Undeclared exception!
      try { 
        cashTransaction0.executeTransaction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.diffblue.corebanking.transaction.CashTransaction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Client client0 = new Client("V6\"rwGmvD");
      Account account0 = new Account(2750L, client0, 2750L);
      BankTransaction bankTransaction0 = new BankTransaction(2750L, mockDate0, account0, account0);
      bankTransaction0.setCurrentStateFailed();
      assertEquals(2750L, bankTransaction0.getTransactionAmount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Client client0 = new Client("3y");
      Account account0 = new Account((-4405L), client0, (-4405L));
      CashTransaction cashTransaction0 = new CashTransaction(2423L, (Date) null, account0);
      long long0 = cashTransaction0.getTransactionAmount();
      assertEquals(2423L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockDate mockDate0 = new MockDate(423L);
      Client client0 = new Client("");
      Account account0 = new Account((-282L), client0, 3310L);
      CashTransaction cashTransaction0 = new CashTransaction(423L, mockDate0, account0);
      cashTransaction0.getTransactionState();
      assertEquals(423L, cashTransaction0.getTransactionAmount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1452L));
      Client client0 = new Client("lA*D&Rc[t1T~+qCx");
      Account account0 = new Account((-1452L), client0, (-1452L));
      CashTransaction cashTransaction0 = new CashTransaction((-1452L), mockDate0, account0);
      cashTransaction0.getTransactionDate();
      assertEquals((-1452L), cashTransaction0.getTransactionAmount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2426L);
      Client client0 = new Client("io.diffblue.corebanking.transaction.CashTransaction");
      Account account0 = new Account(2426L, client0, 2426L);
      CashTransaction cashTransaction0 = new CashTransaction(2426L, mockDate0, account0);
      String string0 = cashTransaction0.toString();
      assertEquals("Transaction: | 70.01.01\t| Source: CASH\t| Target: 2426\t| Amount: 2426\t| Balance: 0\t| Transaction state: NOT_EXECUTED_YET\t|", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2426L);
      Client client0 = new Client("io.diffblue.corebanking.transaction.CashTransaction");
      Account account0 = new Account(2426L, client0, 2426L);
      CashTransaction cashTransaction0 = new CashTransaction(2426L, mockDate0, account0);
      cashTransaction0.executeTransaction();
      try { 
        cashTransaction0.setCurrentStateFailed();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // This transaction was already executed, cannot be set to Failed.
         //
         verifyException("io.diffblue.corebanking.transaction.Transaction", e);
      }
  }
}
