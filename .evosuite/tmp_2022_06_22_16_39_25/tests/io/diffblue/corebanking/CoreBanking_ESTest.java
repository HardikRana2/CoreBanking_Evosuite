/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 22 11:32:36 GMT 2022
 */

package io.diffblue.corebanking;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.diffblue.corebanking.CoreBanking;
import io.diffblue.corebanking.account.Account;
import io.diffblue.corebanking.client.Client;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CoreBanking_ESTest extends CoreBanking_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      String string0 = coreBanking0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      Client client0 = new Client("c-I`");
      Account account0 = coreBanking0.openNewAccount(client0, (-1927L));
      assertEquals(123L, account0.getAccountNumber());
      assertEquals((-1927L), account0.getCurrentBalance());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      Client client0 = new Client("");
      Client client1 = coreBanking0.registerNewClient(client0);
      List<Client> list0 = coreBanking0.getClients();
      assertTrue(list0.contains(client1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      Client client0 = new Client("c-I`");
      coreBanking0.openNewAccount(client0, 0L);
      List<Account> list0 = coreBanking0.getAccounts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      Client client0 = new Client("");
      coreBanking0.registerNewClient(client0);
      client0.addAccount((Account) null);
      // Undeclared exception!
      try { 
        coreBanking0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.diffblue.corebanking.client.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      Client client0 = new Client("");
      coreBanking0.registerNewClient(client0);
      String string0 = coreBanking0.toString();
      assertEquals("Client name: \n", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      Client client0 = new Client("c-I`");
      coreBanking0.openNewAccount(client0, 0L);
      coreBanking0.openNewAccount(client0, 4);
      coreBanking0.openNewAccount(client0, 1582L);
      coreBanking0.openNewAccount(client0, 2396L);
      coreBanking0.openNewAccount(client0, 1582L);
      // Undeclared exception!
      coreBanking0.openNewAccount(client0, 4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      List<Client> list0 = coreBanking0.getClients();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      // Undeclared exception!
      try { 
        coreBanking0.openNewAccount((Client) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.diffblue.corebanking.CoreBanking", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      List<Account> list0 = coreBanking0.getAccounts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      Client client0 = coreBanking0.registerNewClient((Client) null);
      assertNull(client0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CoreBanking coreBanking0 = new CoreBanking();
      coreBanking0.purgeCoreBanking();
  }
}
