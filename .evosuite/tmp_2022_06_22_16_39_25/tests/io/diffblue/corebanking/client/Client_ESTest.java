/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 22 11:36:11 GMT 2022
 */

package io.diffblue.corebanking.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.diffblue.corebanking.account.Account;
import io.diffblue.corebanking.client.Client;
import io.diffblue.corebanking.transaction.BankTransaction;
import java.util.Date;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Client_ESTest extends Client_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Client client0 = new Client((String) null);
      String string0 = client0.getClientName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Client client0 = new Client("CASH");
      Account account0 = new Account(0L, client0, (-140L));
      client0.addAccount(account0);
      List<Account> list0 = client0.getAccounts();
      assertTrue(list0.contains(account0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Client client0 = new Client("I");
      Account account0 = new Account(0L, client0, 4451L);
      BankTransaction bankTransaction0 = new BankTransaction(0L, (Date) null, account0, account0);
      account0.addTransaction(bankTransaction0);
      client0.addAccount(account0);
      // Undeclared exception!
      try { 
        client0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Client client0 = new Client("CASH");
      List<Account> list0 = client0.getAccounts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Client client0 = new Client("I");
      String string0 = client0.toString();
      assertEquals("Client name: I\n", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Client client0 = new Client("I");
      Account account0 = new Account(0L, client0, 4451L);
      client0.addAccount(account0);
      String string0 = client0.toString();
      assertEquals("Client name: I\nAccount: | Acc #: 0\t | Acc name: Current\t | Acc holder: I\t | Acc balance: 4451\t | Acc state: OPEN\t |\nAccount statement empty.\n", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Client client0 = new Client("I");
      String string0 = client0.getClientName();
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Client client0 = new Client("");
      String string0 = client0.getClientName();
      assertEquals("", string0);
  }
}
